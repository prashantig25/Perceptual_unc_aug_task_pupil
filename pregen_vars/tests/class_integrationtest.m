classdef class_integrationtest < matlab.unittest.TestCase
    % CLASS_INTEGRATIONTEST compares the actual table generated by all
    % functions that pregenerate various vars to the expected table
    
    methods(Test)
        function testTableGeneration(testCase)

            % initialize input parameters
            num_trials = 20; % number of trials in a block 
            s0_prob = 0.5; % probability of state = 0
            avg_vis = 0.5; % average visibility of left/right patches
            contrast_high = 0.1; % upper limit of contrast difference range
            contrast_low = 0; % lower limit of contrast difference range
            choice = 1; % to generate contrast difference for choice phase
            con = 1; % whether the block is high/low contrast
            cond = 1; % condition of a block
            cong = 0; % whether the block is congruent/incongruent
            mu = 0.7; % block's contingency parameter
            prob_state_mu = 0.5; % probability of state = 0 during slider phase
            pos = 0.15; % position of box on psychopy screen during slider phase
            seed = 123; % seed value
            rng(seed); % set the seed
            rand_array = rand(num_trials,1); % pseudo-random array
            choice_mu = 0; % to generate contrast difference for the slider phase
            seed = 123; % seed value
            rng(seed) % set the seed
            randperm_array = randperm(num_trials./2,num_trials./2); % pseudo random array

            % STATE
            [~, ~, s] = gen_state(num_trials, s0_prob);
            
            % CONTRAST DIFFERENCE FOR CHOICE PHASE
            [condiff, con_left, con_right]= gen_condiff(avg_vis, contrast_low, contrast_high, s, num_trials, choice, rand_array);
            
            % GENERATE VARS AND ROW ID
            [contrast,~] = repeat_vars(con, num_trials);
            [condition,~] = repeat_vars(cond, num_trials);
            [congruence, row_id] = repeat_vars(cong, num_trials);
            
            % GENERATE CORRECT ACTION FOR EACH TRIAL
            [~, ~, action, ~, ~, ~] = gen_action(mu, con, s, num_trials);
            
            % STATE DURING SLIDER PHASE
            [state_mu] = gen_state_mu(prob_state_mu, num_trials, randperm_array);
            
            % CONTRAST DIFFERENCE FOR SLIDER PHASE
            [~, con_left_mu, con_right_mu]= gen_condiff(avg_vis, contrast_low, contrast_high, state_mu, num_trials, choice_mu, rand_array);
            
            % BORDER POS/TEXT FOR SLIDER PHASE
            [bord_pos, bord_text]= bord_pos_text(num_trials, con, state_mu, pos, cong);
            
            % JITTERED STIMULI TIMINGS
            lower_lim = 0.5; upper_lim = 0.7;
            [jitter_fix] = gen_jitters(num_trials,lower_lim,upper_lim, rand_array);
            
            lower_lim = 1.5; upper_lim = 2.1;
            [jitter_delay] = gen_jitters(num_trials,lower_lim,upper_lim, rand_array);
            
            lower_lim = 0.5; upper_lim = 1;
            [jitter_inst] = gen_jitters(num_trials,lower_lim,upper_lim, rand_array);
            
            lower_lim = 1.6; upper_lim = 2.1;
            [jitter_isi] = gen_jitters(num_trials,lower_lim,upper_lim, rand_array);
            
            lower_lim = 0.2; upper_lim = 0.5;
            [jitter_base_degee] = gen_jitters(num_trials,lower_lim,upper_lim, rand_array);
            
            % ACTUAL TABLE
            actual_tbl = table(s,action,condiff,con_left,con_right,state_mu,con_left_mu,con_right_mu,bord_pos,bord_text ...
                ,contrast,congruence,condition,row_id,jitter_fix,jitter_base_degee,jitter_isi,jitter_delay,jitter_inst, ...
                'VariableNames',{'state','action','condiff','con_left','con_right','state_mu','con_left_mu','con_right_mu' ...
                'bord_pos','bord_text','contrast','congruent','condition','row_id','jitter_fix','jitter_base_degee','jitter_isi', ...
                'jitter_delay','jitter_inst'});

            % EXPECTED STATE
            exp_s0 = repelem(0,10,1);
            exp_s1 = repelem(1,10,1);
            exp_s = [exp_s1;exp_s0];

            % EXPECTED CONTRAST DIFFERENCE & CONTRAST LEVELS
            exp_condiff = (contrast_high-contrast_low).*rand_array + contrast_low;
            exp_conleft = [avg_vis + exp_condiff(1:10); avg_vis - exp_condiff(11:end)];
            exp_conright = [avg_vis - exp_condiff(1:10); avg_vis + exp_condiff(11:end)];
            
            % EXPECTED VARS AND ROW ID
            exp_con = repelem(con,num_trials,1);
            exp_cond = repelem(cond,num_trials,1);
            exp_cong = repelem(cong,num_trials,1);
            exp_rowid = 0:num_trials-1;

            % EXPECTED ACTION 
            if con == 0
                exp_a0 = [repelem(0,mu*10,1);repelem(1,10-(mu*10),1)];
                exp_a1 = [repelem(1,mu*10,1);repelem(0,10-(mu*10),1)];
                exp_action = [exp_a0;exp_a1];
            else
                exp_a0 = [repelem(1,mu*10,1);repelem(0,10-(mu*10),1)];
                exp_a1 = [repelem(0,mu*10,1);repelem(1,10-(mu*10),1)];
                exp_action = [exp_a1;exp_a0];
            end

            % EXPECTED STATE FOR SLIDER PHASE
            state_mu0 = [repelem(0,prob_state_mu*num_trials./2,1)];
            state_mu1 = repelem(1,(1-prob_state_mu)*num_trials./2,1);
            state_mu = [state_mu0;state_mu1];

            exp_statemu0 = state_mu(randperm_array);
            exp_statemu1 = state_mu(randperm_array);
            exp_statemu = [exp_statemu0;exp_statemu1];

            % EXPECTED CONTRAST DIFFERENCE AND LEVELS DURING SLIDER PHASE
            exp_conleft_mu = NaN(num_trials, 1);
            exp_conright_mu = NaN(num_trials, 1);
            exp_condiff_mu = repelem(contrast_high, num_trials, 1);
            zero_indices = find(exp_statemu == 0);
            exp_conleft_mu(zero_indices) = avg_vis - exp_condiff_mu(zero_indices);
            exp_conright_mu(zero_indices) = avg_vis + exp_condiff_mu(zero_indices);
            non_zero_indices = find(exp_statemu ~= 0);
            exp_conleft_mu(non_zero_indices) = avg_vis + exp_condiff_mu(non_zero_indices);
            exp_conright_mu(non_zero_indices) = avg_vis - exp_condiff_mu(non_zero_indices);

            % EXPECTED JITTERED STIMULUS DURATION
            lower_lim = 0.5; upper_lim = 0.7;
            exp_jitterfix = lower_lim + (upper_lim-lower_lim).*rand_array;
            
            lower_lim = 1.5; upper_lim = 2.1;
            exp_jitterdelay = lower_lim + (upper_lim-lower_lim).*rand_array;
            
            lower_lim = 0.5; upper_lim = 1;
            exp_jitterinst = lower_lim + (upper_lim-lower_lim).*rand_array;
            
            lower_lim = 1.6; upper_lim = 2.1;
            exp_jitterisi = lower_lim + (upper_lim-lower_lim).*rand_array;
            
            lower_lim = 0.2; upper_lim = 0.5;
            exp_jitterbase_degee = lower_lim + (upper_lim-lower_lim).*rand_array;
            
            % EXPECTED BORDER AND TEXT 
            exp_bord_pos = NaN(num_trials,1);
            exp_bord_text = strings(num_trials,1);
            for i = 1:num_trials
                if con == 1 && cong == 1 || con == 0 && cong == 0
                    if exp_statemu(i)==1
                        exp_bord_pos(i)=-0.15;
                    else
                        exp_bord_pos(i)=0.15;
                    end
                elseif con == 1 && cong == 0 || con == 0 && cong == 1
                    if exp_statemu(i)==0
                        exp_bord_pos(i)=-0.15;
                    else
                        exp_bord_pos(i)=0.15;
                    end
                end
            end

            for i = 1:num_trials
                if bord_pos(i) > 0
                    exp_bord_text(i)= "right";
                else
                    exp_bord_text(i)= "left";
                end
            end

            % EXPECTED TABLE
            exp_tbl = table(exp_s,exp_action,exp_condiff,exp_conleft,exp_conright,exp_statemu,exp_conleft_mu,exp_conright_mu,exp_bord_pos,exp_bord_text ...
                ,exp_con,exp_cong,exp_cond,exp_rowid',exp_jitterfix,exp_jitterbase_degee,exp_jitterisi,exp_jitterdelay,exp_jitterinst, ...
                'VariableNames',{'state','action','condiff','con_left','con_right','state_mu','con_left_mu','con_right_mu' ...
                'bord_pos','bord_text','contrast','congruent','condition','row_id','jitter_fix','jitter_base_degee','jitter_isi', ...
                'jitter_delay','jitter_inst'});

            % COMPARE
            assertEqual(testCase, actual_tbl, exp_tbl);
        end
    end
end